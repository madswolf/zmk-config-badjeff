/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors.dtsi>
#include <behaviors/studio_unlock.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
//#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>

#include <input/processors/report_rate_limit.dtsi>
#include <input/processors/xyz.dtsi>

#define BAS 0
#define GME 1
#define LNP 2
#define RNP 3
#define LHB 4
#define NUM 5
#define MSK 6
#define MSC 7

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

#define U_MOUSE_SCROLL_MAX 10
#define SCL_U MOVE_Y(U_MOUSE_SCROLL_MAX)
#define SCL_D MOVE_Y(-U_MOUSE_SCROLL_MAX)
#define SCL_L MOVE_X(-U_MOUSE_SCROLL_MAX)
#define SCL_R MOVE_X(U_MOUSE_SCROLL_MAX)

&zip_report_rate_limit {
        limit-ble-only;
};

/ {
        xy_transf: xy_transf {
                compatible = "zmk,input-processor-transform";
                #input-processor-cells = <1>;
                type = <INPUT_EV_REL>;
                x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
                y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
        };
        xy_scaler: xy_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>, <INPUT_REL_Y>;
                track-remainders;
        };
        x_scaler: x_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>;
        };
        to_wheel: to_wheel {
                compatible = "zmk,input-processor-code-mapper";
                #input-processor-cells = <0>;
                type = <INPUT_EV_REL>;
                map = <INPUT_REL_X INPUT_REL_HWHEEL>
                    , <INPUT_REL_Y INPUT_REL_WHEEL>;
        };

        tpoint0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tpoint0_split>;
                input-processors = <&zip_zxy>, <&zip_report_rate_limit 8>
                                 , <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>;
                precise {
                        layers = <NUM>;
                        process-next;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        process-next;
                        input-processors = <&xy_scaler 1 22>, <&x_scaler 0 1>
                                         , <&to_wheel>;
                };
        };

        behaviors {
                ht: hold_tap_mods {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        flavor = "hold-preferred"; bindings = <&kp>, <&kp>;
                        display-name = "mod-tap";
                };
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
                        display-name = "mod-tap";
                };
                hl: homerow_layers {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
                        display-name = "hold-layer";
                };
                m_v: mouse_move {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_X>;
                        y-input-code = <INPUT_REL_Y>;
                        time-to-max-speed-ms = <300>;
                        acceleration-exponent = <1>;
                };
                m_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <50>;
                        acceleration-exponent = <1>;
                };
                ec_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <277>;
                        acceleration-exponent = <0>;
                };
                rot_enc: sensor_rotate {
                        compatible = "zmk,behavior-sensor-rotate";
                        #sensor-binding-cells = <0>;
                        bindings = <&ec_s MOVE_Y(-17)>, <&ec_s MOVE_Y(17)>;
                        tap-ms = <65>;
                };
        };

        //   0   1   2   3   4     5   6   7   8   9  <-- split keyboard
        //  10  11  12  13  14    15  16  17  18  19
        //  20  21  22  23  24    25  26  27  28  29
        //          30  31  32    33  34  35
        //  36  37  38  <-- generic pointer devices
        //  39  40  41  <-- mouse devices
        //  42  43  44
        //  45  46  47
        combos {
                compatible = "zmk,combos";

                spc       { timeout-ms = <50>; key-positions = <16 17>; bindings = <&kp SPC>; layers = <BAS GME LNP RNP LHB NUM>; };
                bksp      { timeout-ms = <50>; key-positions = <17 18>; bindings = <&kp BKSP>; layers = <BAS GME LNP RNP LHB NUM>; };
                del       { timeout-ms = <50>; key-positions = <6 7 8>; bindings = <&kp DEL>; layers = <BAS GME LNP RNP LHB NUM>; };

                esc       { timeout-ms = <50>; key-positions = <11 12>; bindings = <&kp ESC>; layers = <BAS GME LNP RNP LHB NUM>; };
                tab       { timeout-ms = <50>; key-positions = <12 13>; bindings = <&kp TAB>; layers = <BAS GME LNP RNP LHB NUM>; };

                ret_r     { timeout-ms = <50>; key-positions = <26 17 18>; bindings = <&kp RET>; layers = <BAS GME LNP RNP LHB NUM>; };
                ret_l     { timeout-ms = <50>; key-positions = <11 12 23>; bindings = <&kp RET>; layers = <BAS GME LNP RNP LHB NUM>; };

                tog_lnp   { timeout-ms = <50>; key-positions = <1 2>; bindings = <&tog LNP>; layers = <BAS GME LNP RNP LHB NUM MSK MSC>; };
                tog_rnp   { timeout-ms = <50>; key-positions = <7 8>; bindings = <&tog RNP>; layers = <BAS GME LNP RNP LHB NUM MSK MSC>; };

                mkp_swap  { timeout-ms = <50>; key-positions = <36 38>; bindings = <&tog LHB>; layers = <BAS GME LHB NUM MSK MSC>; };
                mou_swap  { timeout-ms = <50>; key-positions = <46 47>; bindings = <&tog LHB>; layers = <BAS GME LHB NUM MSK MSC>; };

                tog_msk_ll { timeout-ms = <50>; key-positions = <21 22>; bindings = <&tog MSK>; layers = <BAS GME LHB NUM MSK MSC>; };
                tog_msk_lr { timeout-ms = <50>; key-positions = <27 28>; bindings = <&tog MSK>; layers = <BAS GME LHB NUM MSK MSC>; };

                dfu_l     { timeout-ms = <50>; key-positions = <0 1>; bindings = <&bootloader>; layers = <MSC>; };
        };


        keymap {
                compatible = "zmk,keymap";
                LNP_layer {
                        display-name = "L N P";
                        bindings = <
   &trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &trans  &trans  &trans
   &kp N0  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans
   &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &trans  &trans  &trans
                   &trans  &trans  &trans    &trans  &trans  &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                RNP_layer {
                        display-name = "R N P";
                        bindings = <
   &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans
   &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp N0
   &trans  &trans  &trans  &trans  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans
                   &trans  &trans  &trans    &trans  &trans  &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                NUM_layer {
// +------------------------------------------------------+     +-------------------------------------------------------+
// |    1!    | LCTRL:2@  |    3#    | LALT:4$  |    5%   |     |    6^    |  RALT:7& |    8&    |  RCTRL 9( |    0)    |
// |    `~    |   TAB     |    {[    |    ]}    |         |     |    LFT   |   DWN    |    UP    |    RGT    |    '"    |
// |  SHFT \| |    /?     |          |          |         |     |          |    -_    |    =+    |    \|     |  SHFT /? |
//                        |          |          |         |     |          |    (H)   |          |
                        display-name = "Num";
                        bindings = <
   &kp N1             &hm LCTRL N2   &kp N3     &hm LALT N4   &kp N5              &kp N6      &hm RALT N7   &kp N8      &hm RCTRL N9   &kp N0
   &kp GRAVE          &kp TAB        &kp LBKT   &kp RBKT      &trans              &kp LEFT    &kp DOWN      &kp UP      &kp RIGHT      &kp SQT
   &ht LSHFT BSLH     &kp FSLH       &trans     &trans        &trans              &trans      &kp MINUS     &kp EQUAL   &kp BSLH       &ht RSHFT FSLH
                                     &trans     &trans        &trans              &trans      &trans        &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
       };
};
